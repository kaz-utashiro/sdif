#!/usr/bin/perl -CSDA

require 5.010;
use strict;
use warnings;
use utf8;
use Carp;
use List::Util qw(min max reduce);
use Getopt::Long;
use Pod::Usage;
use Text::ParseWords qw(shellwords);
use Term::ANSIColor qw(:constants);
use Data::Dumper;
$Data::Dumper::Terse = 1;

##
## sdif: sdiff clone
##
## Copyright (c) 1992-2014 Kazumasa Utashiro
##
## Original version on Jul 24 1991
##
## Use and redistribution for ANY PURPOSE are granted as long as all
## copyright notices are retained.  Redistribution with modification
## is allowed provided that you make your modified version obviously
## distinguishable from the original one.  THIS SOFTWARE IS PROVIDED
## BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES ARE
## DISCLAIMED.
##

=pod

=head1 NAME

sdif - side-by-side diff viewer for ANSI terminal

=head1 SYNOPSIS

sdif file_1 file_2

diff ... | sdif

    --number, -n	print line number
    --digit=#		set the line number digits (default 4)
    --truncate, -t	truncate long line
    --onword		fold line on word boundaries
    --context, -c, -C#	context diff
    --unified, -u, -U#	unified diff

    --width=#, -W#	specify width of output (default 80)
    --[no]color		use color or not (default on)
    --colormap, --cm	specify color map
    --colortable	show color table
    --[no]256		on/off ANSI 256 color mode (default on)
    --mark=position	mark position (right, left, center, side) or no
    --view, -v		viewer mode

    --man		display manual page
    --diff=s		set diff command
    --diffopts=s	set diff command options

    --cdif		use ``cdif'' as word context diff backend
    --cdifopts=s	set cdif command options
    --mecab		pass --mecab option to cdif

=cut

my $opt_n;
my $opt_l;
my $opt_s;
my $opt_q;
my $opt_d;
my $opt_c;
my $opt_u;
my $opt_C;
my $opt_U;
my $opt_truncate;
my $opt_onword;
my $opt_cdif;
my @opt_cdifopts = qw(--nocc --nomc --notc);
my $opt_env = 1;
my @opt_colormap;
my @opt_diffopts;
my $opt_diff = 'diff';
my $opt_digit = 4;
my $opt_view;
my $screen_width;
my $column_width;

my $opt_color = 1;
my $opt_256 = 1;
my $opt_mark = "center";
my $opt_W;
my $opt_colortable;

##
## Special treatment --noenv option.
##
if (grep { $_ eq '--noenv' } @ARGV) {
    $opt_env = 0;
}
if ($opt_env and my $env = $ENV{'SDIFOPTS'}) {
    unshift(@ARGV, shellwords($env));
}

my @optargs = (
    "n|number!" => \$opt_n,
    "digit=i" => \$opt_digit,
    "truncate|t!" => \$opt_truncate,
    "onword|W!" => \$opt_onword,
    "mark=s" => \$opt_mark,
    "l" => \$opt_l,
    "s" => \$opt_s,
    "width|W=i" => \$opt_W,
    "view|v" => \$opt_view,

    "d+" => \$opt_d,
    "h|help" => sub { usage() },
    "man" => sub { pod2usage({-verbose => 2}) },

    "env!" => \$opt_env,
    "diff=s" => \$opt_diff,
    "diffopts=s" => \@opt_diffopts,
    "color!" => \$opt_color,
    "colormap|cm=s" => \@opt_colormap,
    "256!" => \$opt_256,
    "c|context" => \$opt_c,
    "u|unified" => \$opt_u,
    "C=i" => \$opt_C,
    "U=i" => \$opt_U,
    "cdif" => \$opt_cdif,
    "cdifopts=s" => \@opt_cdifopts,
    "colortable" => \$opt_colortable,

    "--mecab" => sub { push @opt_cdifopts, "--mecab" },
);

my @SAVEDARGV = @ARGV;
Getopt::Long::Configure("bundling");
GetOptions(@optargs) || usage();

warn "\@ARGV = (@SAVEDARGV)\n" if $opt_d;

my %colormap =
    $opt_256 ? (
	OCOMMAND => "010SE",
	NCOMMAND => "010SE",
	OFILE => "010DSE",
	NFILE => "010DSE",
	OMARK => "010/444",
	NMARK => "010/444",
	UMARK => "",
	OLINE => "220",
	NLINE => "220",
	ULINE => "",
	OTEXT => "E/454",
	NTEXT => "E/454",
	UTEXT => "",
    ) : (
	OCOMMAND => "GSE",
	NCOMMAND => "GSE",
	OFILE => "GDSE",
	NFILE => "GDSE",
	OMARK => "wG",
	NMARK => "wG",
	UMARK => "",
	OLINE => "Y",
	NLINE => "Y",
	ULINE => "",
	OTEXT => "G",
	NTEXT => "G",
	UTEXT => "",
    );

my $colorize;
if ($opt_color) {
    if (@opt_colormap) {
	map {
	    my $c = pop @$_;
	    map { $colormap{$_} = $c }
	    map { match_glob($_, keys %colormap) }
	    @$_;	
	}
	map { [ split /=/, $_, -1 ] }
	map { split /,/ }
	@opt_colormap;
    }
    $colorize = \&color;
} else {
    $colorize = sub { $_[1] } ;
}

$colormap{OUMARK} ||= $colormap{UMARK} || $colormap{OMARK};
$colormap{NUMARK} ||= $colormap{UMARK} || $colormap{NMARK};
$colormap{OULINE} ||= $colormap{ULINE} || $colormap{OLINE};
$colormap{NULINE} ||= $colormap{ULINE} || $colormap{NLINE};

##
## setup diffopts
##
push(@opt_diffopts, "-c") if $opt_c;
push(@opt_diffopts, "-u") if $opt_u;
push(@opt_diffopts, "-C$opt_C") if defined $opt_C;
push(@opt_diffopts, "-U$opt_U") if defined $opt_U;

##
## setup cdifopts
##
push(@opt_cdifopts, '--no256') if not $opt_256;

my($OLD, $NEW, $DIFF);
if (@ARGV == 2) {
    ($OLD, $NEW) = @ARGV;
    $DIFF = "$opt_diff @opt_diffopts $OLD $NEW |";
} elsif (@ARGV < 2) {
    $DIFF = shift || '-';
    $opt_s++;
} else {
    usage("Unexpected arguments.\n\n");
}
my $readfile =
     ($OLD and $NEW)
     && !($opt_s || $opt_c || $opt_u || (defined $opt_C || defined $opt_U));

sub usage {
    select STDERR;
    print @_;
    pod2usage(-verbose => 0, -exitval => "NOEXIT");
    exit;
}

use constant {
    RIGHT => 'right',
    LEFT => 'left',
    NO => 'no',
};
my %markpos = (
    center => [ RIGHT, LEFT  ],
    side   => [ LEFT,  RIGHT ],
    right  => [ RIGHT, RIGHT ],
    left   => [ LEFT,  LEFT  ],
    no     => [ NO,    NO    ],
    );
my($omarkpos, $nmarkpos);
if (my $pos = $markpos{$opt_mark}) {
    ($omarkpos, $nmarkpos) = @$pos;
} else {
    my @keys = sort keys %markpos;
    usage "Use one from (@keys) for option --mark\n\n"
}

my $num_format = "%${opt_digit}d";

$screen_width = $opt_W || &terminal_width;
$column_width = max(1, int(($screen_width - ($opt_mark ne NO ? 2 : 0)) / 2));

my $oline = 1;
my $nline = 1;

if ($opt_colortable) {
    color_table();
    exit;
}

if ($opt_d) {
    printf STDERR "\$OLD = %s\n", $OLD // "undef";
    printf STDERR "\$NEW = %s\n", $NEW // "undef";
    printf STDERR "\$DIFF = %s\n", $DIFF // "undef";
}

if ($readfile) {
    open(OLD, $OLD) || die "$OLD: $!\n";
    open(NEW, $NEW) || die "$NEW: $!\n";
    if ($opt_view) {
	$DIFF = "/dev/null";
    }
}

if ($opt_cdif) {
    my $pid = open DIFF, '-|';
    if (not defined $pid) {
	die "$!" if not defined $pid;
    }
    ## child
    elsif ($pid == 0) {
	if ($DIFF ne '-') {
	    open(STDIN, $DIFF) || die "cannot open diff: $!\n";
	}
	do { exec join ' ', 'cdif', @opt_cdifopts } ;
	warn "exec failed: $!";
	print while <>;
	exit;
    }
    ## parent
    else {
	## nothing to do
    }
} else {
    open(DIFF, $DIFF) || die "cannot open diff: $!\n";
}

use constant {
    DIFF_UNDEF => 0,
    DIFF_N => 1,
    DIFF_C => 2,
    DIFF_U => 3,
};

while (<DIFF>) {
    my @old;
    my @new;
    my($left, $ctrl, $right);
    #
    # normal diff
    #
    if (($left, $ctrl, $right) = /^([\d,]+)([adc])([\d,]+)$/) {
	my($l1, $l2) = range($left);
	my($r1, $r2) = range($right);
	if ($readfile) {
	    my $identical_line = $l1 - $oline + 1 - ($ctrl ne 'a');
	    print_identical($identical_line);
	}
	if ($opt_d || $opt_s) {
	    print_command($column_width, $_, $_);
	}
	if ($ctrl eq 'd' || $ctrl eq 'c') {
	    ($oline) = $left =~ /^(\d+)/;
	    my $n = $l2 - $l1 + 1;
	    @old = read_line(*DIFF, $n);
	    $readfile and read_line(*OLD, $n);
	}
	read_line(*DIFF, 1) if $ctrl eq 'c';
	if ($ctrl eq 'a' || $ctrl eq 'c') {
	    ($nline) = $right =~ /^(\d+)/;
	    my $n = $r2 - $r1 + 1;
	    @new = read_line(*DIFF, $n);
	    $readfile and read_line(*NEW, $n);
	}
	map { s/^..// } @old, @new;
	flush_buffer([], \@old, \@new);
    }
    #
    # context diff
    #
    elsif (/^\*\*\* /) {
	my $next = <DIFF>;
	print_command($column_width, $_, $next, type => 'FILE');
    }
    elsif ($_ eq "***************\n") {
	my $ohead = $_ = <DIFF>;
	unless (($left) = /^\*\*\* ([\d,]+) \*\*\*\*$/) {
	    print;
	    next;
	}
	my $oline = range($left);
	my $dline = 0;
	my $cline = 0;
	my $nhead = $_ = <DIFF>;
	unless (($right) = /^--- ([\d,]+) ----$/) {
	    @old = read_line(*DIFF, $oline - 1, $nhead);
	    $nhead = $_ = <DIFF>;
	    unless (($right) = /^--- ([\d,]+) ----$/) {
		print $ohead, @old, $_;
		next;
	    }
	    for (@old) {
		/^-/ and ++$dline;
		/^!/ and ++$cline;
	    }
	}
	my $nline = range($right);
	if (@old == 0 or $cline != 0 or ($oline - $dline != $nline)) {
	    @new = read_line(*DIFF, $nline);
	}
	print_command($column_width, $ohead, $nhead);
	($oline) = $left =~ /^(\d+)/;
	($nline) = $right =~ /^(\d+)/;

	my @buf = merge_diffc(\@old, \@new);
	map { map { s/^..// } @$_ } @buf;
	flush_buffer(@buf);
    }
    #
    # unified diff
    #
    elsif (/^--- /) {
	my $next = <DIFF>;
	print_command($column_width, $_, $next, type => 'FILE');
    }
    elsif (/^\@\@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? \@\@/) {
	($oline, $nline) = ($1, $3);
	my($a, $b) = ($2//1, $4//1);
	print_command($column_width, $_, $_, type => 'COMMAND');

	my @buf = read_diffu(*DIFF, $a, $b);
	map { map { s/^.// } @$_ } @buf;
	flush_buffer(@buf);
    }
    else {
	print;
    }
}

close DIFF;
my $exit = $? >> 8;

if ($readfile) {
    if ($exit < 2) {
	print_identical(-1);
    }
    close OLD;
    close NEW;
}

exit($exit == 2);

######################################################################

my %slot;
BEGIN {
    %slot = (" " => 0, "\t" => 0, "-" => 1, "+" => 2);
}
sub read_diffu {
    my $FH = shift;
    my @l = (0, @_);

    my $i = 0;
    my @buf;
    my $slot;
    while (2 * $l[0] + $l[1] + $l[2] > 0 and $_ = <$FH>) {
	# `git diff' produces message like this:
	# "\ No newline at end of file"
	/^[ \t\-\+]/ or next;
	while (($i % 3) != ($slot = $slot{substr($_, 0, 1)})) {
	    $i++;
	}
	$l[$slot]--;
	$buf[$i] //= [];
	push @{$buf[$i]}, $_;
    }
    map { $_ // [] } @buf;
}

sub merge_diffc {
    my @o = @{+shift};
    my @n = @{+shift};
    my @buf;

    die if grep { not /^[ \-\+\!] / } @o, @n;

    while (@o or @n) {
	my @slot = ([], [], []);
	push @buf, @slot;

	if (@o and @n) {
	    while (@o and @n and $o[0] =~ /^  / and $n[0] =~ /^  /) {
		push @{$slot[0]}, shift @o;
		shift @n;
	    }
	}
	elsif (@o) {
	    push(@{$slot[0]}, shift @o) while @o and $o[0] =~ /^  /;
	}
	elsif (@n) {
	    push(@{$slot[0]}, shift @n) while @n and $n[0] =~ /^  /;
	}

	push(@{$slot[1]}, shift @o) while @o and $o[0] =~ /^\- /;
	next if @{$slot[1]};

	push(@{$slot[2]}, shift @n) while @n and $n[0] =~ /^\+ /;
	next if @{$slot[2]};

	push(@{$slot[1]}, shift @o) while @o and $o[0] =~ /^! /;
	push(@{$slot[2]}, shift @n) while @n and $n[0] =~ /^! /;
    }

    @buf;
}

sub flush_buffer {

    my($omark, $nmark) = qw(< >);

    push @_, [] while @_ % 3;

    if ($opt_view) {
	@_ = map { @$_ }
	reduce {
	    [ [] ,
	      [ map { @$_ } $a->[1], $b->[0], $b->[1] ] ,
	      [ map { @$_ } $a->[2], $b->[0], $b->[2] ] ] }
	map { $_ ? [ ( splice @_, 0, 3 ) ] : [ [], [], [] ] }
	0 .. @_ / 3 ;
	($omark, $nmark) = (' ', ' ');
    }

    while (my($s, $o, $n) = splice(@_, 0, 3)) {

	for (@$s) {
	    print_column($column_width, $_, ' ', ' ', $_);
	    $oline++;
	    $nline++;
	}

	while (@$o or @$n) {
	    my $old = shift @$o;
	    my $new = shift @$n;
	    my $omark = $old ? $omark : ' ';
	    my $nmark = $new ? $nmark : ' ';

	    print_column($column_width, $old, $omark, $nmark, $new);

	    $oline++ if defined $old;
	    $nline++ if defined $new;
	}
    }
}

sub print_identical {
    my $n = shift;
    while ($n--) {
	my $old = <OLD>;
	my $new = <NEW>;
	defined $old or defined $new or last;
	if ($opt_l) {
	    print linenum($oline), " " if $opt_n;
	    print expand_tab($old);
	} else {
	    print_column($column_width, $old, ' ', ' ', $new);
	}
	$oline++;
	$nline++;
    }
}

sub linenum {
    my $n = shift;
    defined $n ? (sprintf $num_format, $n) : (' ' x $opt_digit);
}

sub print_column {
    my($width, $old, $omark, $nmark, $new, $noline) = @_;
    my $print_number = ($opt_n and not $noline);

    my($onum, $nnum) = ('', '');
    my $nspace = $print_number ? ' ' : '';
    if (defined $old) {
	chomp $old;
	$old = expand_tab($old);
	$onum = linenum($oline) if $print_number;
    }
    if (defined $new) {
	chomp $new;
	$new = expand_tab($new);
	$nnum = linenum($nline) if $print_number;
    }

    my($OTEXT, $OLINE, $OMARK) =
	$omark =~ /\S/ ? qw(OTEXT OLINE OMARK) : qw(UTEXT OULINE OUMARK);
    my($NTEXT, $NLINE, $NMARK) =
	$nmark =~ /\S/ ? qw(NTEXT NLINE NMARK) : qw(UTEXT NULINE NUMARK);

    $omark =~ s/\S/>/ if $omarkpos eq LEFT;
    $omark =~ s/\S/</ if $omarkpos eq RIGHT;
    $nmark =~ s/\S/>/ if $nmarkpos eq LEFT;
    $nmark =~ s/\S/</ if $nmarkpos eq RIGHT;

    my $expand_right = $colormap{NTEXT} =~ /E/ || $nmarkpos eq RIGHT;

    while (1) {
	(my $o, $old) = fold($old,
			     max(1, $width - length($onum . $nspace)),
			     onword => $opt_onword, pad => 1);
	(my $n, $new) = fold($new,
			     max(1, $width - length($nnum . $nspace)),
			     onword => $opt_onword, pad => 1);

	my %f;
	$f{OMARK} = $colorize->($OMARK, $omark);
	$f{OLINE} = $colorize->($OLINE, $onum) . $nspace if $print_number;
	$f{OTEXT} = $colorize->($OTEXT, $o) if $o ne "";
	$f{NMARK} = $colorize->($NMARK, $nmark);
	$f{NLINE} = $colorize->($NLINE, $nnum) . $nspace if $print_number;
	$f{NTEXT} = $colorize->($NTEXT, $n) if $n ne "";
	print_fields(\%f);

	last if $opt_truncate;
	last unless $old ne '' or $new ne '';

	if ($print_number) {
	    $onum =~ s/./ /g;
	    $nnum =~ s/./ /g;
	}
	$omark = $old ne '' ? '.' : ' ';
	$nmark = $new ne '' ? '.' : ' ';
    }
}

sub print_command {
    my($width, $old, $new) = splice(@_, 0, 3);
    my %opt = @_;

    if (defined $old) {
	chomp $old;
	$old = expand_tab($old);
    }
    if (defined $new) {
	chomp $new;
	$new = expand_tab($new);
    }
    my($o, $ox) = fold($old, $width, pad => 1);
    my($n, $nx) = fold($new, $width, pad => 1);

    my($ocolor, $ncolor) = qw(OCOMMAND NCOMMAND);
    if ($opt{type}) {
	$ocolor = "O" . $opt{type};
	$ncolor = "N" . $opt{type};
    }

    print_fields( { OMARK => " ", NMARK => " ",
		    OTEXT => $colorize->($ocolor, $o),
		    NTEXT => $colorize->($ncolor, $n) } );
}

sub print_fields {
    my $F = shift;
    local $_;
    $_ = $F->{OMARK} and print if $omarkpos eq LEFT;
    $_ = $F->{OLINE} and print;
    $_ = $F->{OTEXT} and print;
    $_ = $F->{OMARK} and print if $omarkpos eq RIGHT;
    $_ = $F->{NMARK} and print if $nmarkpos eq LEFT;
    $_ = $F->{NLINE} and print;
    $_ = $F->{NTEXT} and print;
    $_ = $F->{NMARK} and print if $nmarkpos eq RIGHT;
    print "\n";
}

my $wchars;
my $alphanum;
my $reset_re;
my $color_re;
my $control_re;
BEGIN {
    my $wide      = '\p{East_Asian_Width=Wide}';
    my $fullwidth = '\p{East_Asian_Width=FullWidth}';
    my $ambiguous = '\p{East_Asian_Width=Ambiguous}';
    $wchars = "${wide}${fullwidth}";
    $alphanum = '_\d\p{Latin}';
    $reset_re = qr/\e\[[0;]*m/;
    $color_re = qr{ \e \[ [\d;]* m }x;
    $control_re = qr{ \e \] [\;\:\/0-9a-z]* \e \\ }x;
}

sub fold {
    local $_ = shift // "";
    my $width = shift;
    my %opt = @_ ? @_ : {};

    $width < 1 and croak "width should be greater than 0";

    my $folded = '';
    my $room = $width;
    my @color_stack;
    while (length) {

	if (s/^($control_re)//) {
	    $folded .= $1;
	    next;
	}
	if (s/^($reset_re)//) {
	    $folded .= $1;
	    @color_stack = ();
	    next;
	}

	last if $room < 1;
	last if $room != $width and /^[$wchars]/o and $room < 2;

	if (s/^($color_re)//) {
	    $folded .= $1;
	    push @color_stack, $1;
	    next;
	}

	if (s/^(\e*[^\e]+)//) {
	    my $s = $1;
	    if ((my $w = mbwidth($s)) <= $room) {
		$folded .= $s;
		$room -= $w;
		next;
	    }
	    my($a, $b) = simple_fold($s, $room);
	    my $w = mbwidth($a);
	    if ($w > $room and $room < $width) {
		$_ = $s . $_;
		last;
	    }
	    ($folded, $_) = ($folded . $a, $b . $_);
	    $room -= $w;
	} else {
	    die "panic ($_)";
	}
    }

    if ($opt{onword}
	and my($tail) = /^([$alphanum]+)/o
	and $folded =~ m{
		^
		( (?: [^\e]* $color_re ) *+ )
		( .*? )
		( [$alphanum]+ )
		$
	}xo
	) {
	## Break line before word only when enough space will be
	## provided for the word in the next call.
	my($s, $e) = ($-[3], $+[3]);
	my $l = $e - $s;
	if ($room + $l < $width and $l + length($tail) <= $width) {
	    $_ = substr($folded, $s, $l, '') . $_;
	    $room += $l;
	}
    }

    if (@color_stack) {
	$folded .= RESET;
	$_ = join '', @color_stack, $_ if $_ ne '';
    }

    $folded .= ' ' x $room if $opt{pad};

    ($folded, $_);
}

##
## Trim off one or more characters from the top.
##
sub simple_fold {
    local $_ = shift;
    my $width = shift;
    $width <= 0 and croak "parameter error";
    ##
    ## This process seems to be inefficient, but \X matches visually
    ## multiple characters in some language, such as Thai.
    ## c.f. http://docstore.mik.ua/orelly/perl4/cook/ch01_09.htm
    ##
    my $len = 0;
    while (/\G(\X)/g) {
	my $w = mbwidth($1);
	last if $width < $w and $len > 0;
	$len += length($1);
	$width -= $w;
	last if $width <= 0;
    }
    (substr($_, 0, $len), substr($_, $len));
}

sub read_line {
    local *FH = shift;
    my $c = shift;
    my @buf = @_;
    while ($c--) {
	last if eof FH;
	push @buf, scalar <FH>;
    }
    wantarray ? @buf : join '', @buf;
}

sub range {
    local $_ = shift;
    my($from, $to) = /,/ ? split(/,/) : ($_, $_);
    wantarray ? ($from, $to) : $to - $from + 1;
}

my @tabspace;
BEGIN {
    @tabspace = map { ' ' x (8 - $_) } 0..7;
}
sub expand_tab {
    local $_ = shift;
    1 while s{^([^\t]*)\t(\t*)}{
	$1 . $tabspace[pwidth($1) % 8] . $tabspace[0] x length($2)
    }e;
    $_;
}

sub pwidth {
    local $_ = shift;
    if (/[\010\e\f\r]/) {
	s/^.*[\f\r]//;
	s/$color_re//g;
	1 while s/[^\010]\010//;
	s/^\010+//;
    }
    mbwidth($_);
}

sub mbwidth {
    my $arg = shift;
    my $len = 0;
    while ($arg =~ m{
	( (?: (?![$wchars]) \P{Mn} ) + )
	|
	( (?: (?=[$wchars]) \P{Mn} ) + )
    }xgo) {
	$len += defined $1 ? length($1) : length($2) * 2;
    }
    $len;
}

sub terminal_width {
    my $default = 80;
    my $cols = `tput cols`;
    chomp $cols;
    $cols > 0 ? int($cols) : $default;
}

sub unesc {
    local $_ = shift;
    s/\e/\\e/g;
    $_;
}

use constant { FG => 'fg', BG => 'bg' } ;

sub colorseq {
    my $colormode = shift;

    my($start, $end) = ('', '');
    if ($colormode =~ /,/) {
	($start, $end) = split(/,/, $colormode, 2);
    } else {
	map {
	    if (s/\/((?i:[\da-f]{6})|[0-5][0-5][0-5])// and $opt_256) {
		$start .= ansi256($1, BG);
	    }
	    if (s/((?i:[\da-f]{6})|[0-5][0-5][0-5])// and $opt_256) {
		$start .= ansi256($1, FG);
	    }
	    $start .= UNDERLINE if /U/;
	    $start .= REVERSE   if /S/;
	    $start .= BOLD      if /D/;
	    $start .= BLINK     if /F/;
	    $start .= RED       if /R/; $start .= ON_RED       if /r/;
	    $start .= GREEN     if /G/; $start .= ON_GREEN     if /g/;
	    $start .= BLUE      if /B/; $start .= ON_BLUE      if /b/;
	    $start .= CYAN      if /C/; $start .= ON_CYAN      if /c/;
	    $start .= MAGENTA   if /M/; $start .= ON_MAGENTA   if /m/;
	    $start .= YELLOW    if /Y/; $start .= ON_YELLOW    if /y/;
	    $start .= BLACK     if /K/; $start .= ON_BLACK     if /k/;
	    $start .= WHITE     if /W/; $start .= ON_WHITE     if /w/;
	} $colormode if $colormode;
	$end = RESET if $start;
	$start =~ s/m\e\[/;/g;
    }
    ($start, $end);
}

sub ansi256 {
    my($code, $fg_or_bg) = @_;
    my($r, $g, $b);
    if ($code =~ /^([0-5])([0-5])([0-5])$/) {
	($r, $g, $b) = ($1, $2, $3);
    }
    elsif ($code =~ /^([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i) {
	$r = int(5 * hex($1) / 255);
	$g = int(5 * hex($2) / 255);
	$b = int(5 * hex($3) / 255);
    }
    else {
	croak "Color format error.\n";
    }
    sprintf("\e[%d;%d;%dm",
	    $fg_or_bg eq BG ? 48 : 38,
	    5,
	    16 + ($r * 36) + ($g * 6) + $b
	);
}

my %colorcache;

sub color {
    my($color, $text) = @_;
    return $text unless $color;
    unless ($colorcache{$color}) {
	my $mode = exists $colormap{$color} ? $colormap{$color} : $color;
	$colorcache{$color} = [ colorseq($mode) ];
    }
    my($s, $e) = @{$colorcache{$color}};
    if ($s ne "") {
	$text =~ s/(^|$reset_re)([^\e\r\n]+)/$1$s$2$e/mg;
    }
    $text;
}

##
## Implement minimum function because Text::Glob is not in standard library
##
sub match_glob {
    local $_ = shift;
    s/\?/./g;
    s/\*/.*/g;
    my $regex = qr/^$_$/;
    grep { $_ =~ $regex } @_;
}

sub color_table {
    for my $c (0..5) {
	for my $b (0..5) {
	    my @format =
		("%d$b$c", "$c%d$b", "$b$c%d", "$b%d$c", "$c$b%d", "%d$c$b")
		[0 .. min(5, $screen_width / (4 * 6) - 1)];
	    for my $format (@format) {
		for my $a (0..5) {
		    my $rgb = sprintf $format, $a;
		    print color("$rgb/$rgb", " $rgb");
		}
	    }
	    print "\n";
	}
    }
}

__END__

=pod

=head1 DESCRIPTION

B<sdif> is inspired by System V L<sdiff(1)> command.  The basic
feature of sdif is making a side-by-side listing of two different
files.  All contents of two files are listed on left and right sides.
Center column is used to indicate how different those lines.  No mark
means no difference.  Added, deleted and modified lines are marked
with `<' and `>' character.

    1 deleted  <
    2 same          1 same
    3 changed  <>   2 modified
    4 same          3 same
                >   4 added

It also reads and formats the output from B<diff> command from
standard input.  Besides normal diff output, context diff I<-c> and
unified diff I<-u> output will be handled properly.

Each lines can be displayed in different colors.  Read B<--colormap>
section in ths manual for detail.

While B<sdif> doesn't care about the contents of each modified lines,
it can read the output from B<cdif> command which show the word
context differences of each lines.  Option B<--cdif> set the
appropriate options for B<cdif>.  Set I<--nocc>, I<--nomc> options at
least when invoking B<cdif> manually.  Option I<--notc> is pereferable
because text color can be handled by B<sdif>.

Environment valuable B<SDIFOPTS> is used to set default options.


=head1 OPTIONS

=over 7

=item B<--width>=I<width>, B<-W> I<width>

Use width as a width of output listing.  Default width is 80.  If the
standard error is assinged to a terminal, the width is taken from it
if possible.

=item B<--number>, B<-n>

Print line number on each lines.

=item B<--digit>=I<n>

Line number is diplayed in 4 digits by dafult.  Use this option to
change it.

=item B<-c>, B<-C>I<n>, B<-u>, B<-U>I<n>

Passed through to the back-end diff command.  Sdif can interpret the
output from normal, context (I<diff -c>) and unified diff (I<diff
-u>).

=item B<--truncate>, B<-t>

Truncate lines if they are longer than printing width.

=item B<--onword>

Fold longs line at word boundaries.

=item B<--cdif>

Use B<cdif> command instead of normal diff command.

=item B<--cdifopts>=I<option>

Specify options for backend B<cdif> command.

=item B<--mecab>

Pass B<--mecab> option to backend B<cdif> command.  Use B<--cdifopts>
to set other options.

=item B<--diff>=I<command>

Any command can be specified as a diff command to be used.  Piping
output to B<sdif> is easier unless you want to get whole text.

=item B<--diffopts>=I<option>

Specify options for backend B<diff> command.

=item B<--mark>=I<position>

Specify the position for mark.  Choose from I<left>, I<right>,
I<center>, I<side> or I<no>.  Default is I<center>.

=item B<-->[B<no>]B<color>

Use ANSI color escape sequence for output.  Default is true.

=item B<-->[B<no>]B<256>

Use ANSI 256 color mode.  Default is true.

=item B<--colortable>

Show table of ANSI 216 colors.

=item B<--view>, B<-v>

Viewer mode.  Display two files side-by-side in straightforward order.

=item B<--colormap>=I<colormap>, B<--cm>=I<colormap>

Basic I<colormap> format is :

    FIELD=COLOR

where the FIELD is one from these :

    OLD       NEW       UNCHANGED
    --------- --------- ---------
    OCOMMAND  NCOMMAND           : Command line
    OFILE     NFILE              : File name
    OMARK     NMARK     UMARK    : Mark
    OLINE     NLINE     ULINE    : Line number
    OTEXT     NTEXT     UTEXT    : Text

If UMARK and/or ULINE is empty, OMARK/NMARK and/or OLINE/NLINE are
used instead.

You can make multiple filelds same color joining them by = :

    FIELD1=FIELD2=...=COLOR

Also wildcard can be used for field name :

    *CHANGE=BDw

Multiple fields can be specified by repeating options

    --cm FILED1=COLOR1 --cm FIELD2=COLOR2 ...

or combined with comma (,) :

    --cm FILED1=COLOR1,FIELD2=COLOR2, ...

COLOR is combination of single character representing uppercase
foreground color :

    R  Red
    G  Green
    B  Blue
    C  Cyan
    M  Magenta
    Y  Yellow
    K  Black
    W  White

and corresponding lowercase background color :

    r, g, b, c, m, y, k, w

or RGB value if using ANSI 256 color terminal :

    FORMAT:
        foreground[/background]

    COLOR:
        000 .. 555       : 6 x 6 x 6 216 colors
        000000 .. FFFFFF : 24bit RGB mapped to 216 colors

    Sample:
        005     0000FF        : blue foreground
           /505       /FF00FF : magenta background
        000/555 000000/FFFFFF : black on white
        500/050 FF0000/00FF00 : red on green

and other effects :

    S  Standout (reverse video)
    U  Underline
    D  Double-struck (boldface)
    F  Flash (blink)
    E  Expand

B<E> is effective for command, file and text line.  That line will be
expanded to window width filling up by space characters.  Left column
is expanded always.  You may want to use this to set background color
for right column.

Defaults are :

    OCOMMAND => "010SE"   or "GSE"
    NCOMMAND => "010SE"   or "GSE"
    OFILE    => "010DSE"  or "GDSE"
    NFILE    => "010DSE"  or "GDSE"
    OMARK    => "010/444" or "wG"
    NMARK    => "010/444" or "wG"
    UMARK    => ""
    OLINE    => "220"     or "Y"
    NLINE    => "220"     or "Y"
    ULINE    => ""
    OTEXT    => "E/454"   or "G"
    NTEXT    => "E/454"   or "G"
    UTEXT    => ""

This is equivalent to :

    sdif --cm 'OCOMMAND=CSE,NCOMMAND=MSE,OFILE=CDE,NFILE=MDE' \
         --cm 'OMARK=Cw,NMARK=Mw,UMARK=w' \
         --cm '*LINE=Y,[ON]TEXT=E/554,UTEXT='

=back


=head1 AUTHOR

=over

=item Kazumasa Utashiro

=item L<https://github.com/kaz-utashiro/>

=back


=head1 SEE ALSO

=over

=item sdif

=over

=item L<https://github.com/kaz-utashiro/sdif>

=item L<http://kaz-utashiro.github.io/sdif/>

=back

=item cdif

=over

=item L<https://github.com/kaz-utashiro/cdif>

=item L<http://kaz-utashiro.github.io/cdif/>

=back

=back

=cut
